name: CodeNarc Lint Check

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  codenarc:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Get Changed Groovy Files
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: '**/*.groovy'

      - name: Check if Groovy Files Changed
        id: check_files
        run: |
          if [[ -z "${{ steps.changed_files.outputs.all_changed_files }}" ]]; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Debug Changed Files Before CodeNarc
        run: |
          changed_files=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | tr ' ' ',')
          echo "Files being analyzed: $changed_files"

      - name: Run CodeNarc on Changed Files
        id: run_codenarc
        if: env.skip != 'true'
        continue-on-error: true
        run: |
          changed_files=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | tr ' ' ',')
          ./gradlew codenarcMain -PcodenarcIncludeFiles="$changed_files" || echo "CodeNarc failed, continuing execution"

      - name: Parse CodeNarc Violations
        id: parse_violations
        if: env.skip != 'true'
        run: |
          # Debug log to verify main.xml existence
          if [ -f build/reports/codenarc/main.xml ]; then
            echo "main.xml exists, proceeding with parsing."
          else
            echo "Error: main.xml does not exist!" && exit 1
          fi
          
          if [ -s build/reports/codenarc/main.xml ]; then
            xmllint --xpath '//File' build/reports/codenarc/main.xml | sed -nE 's/.*<File name="([^"]+)".*/\1/p' > file-names.txt
            xmllint --xpath '//Violation' build/reports/codenarc/main.xml | sed -nE 's/.*lineNumber="([^"]+)".*<Message><!\[CDATA\[(.*)\]\]><\/Message>.*/\1:\2/p' > violations.txt
          
            paste -d ":" file-names.txt violations.txt > codenarc-violations.txt || true
          else
            touch codenarc-violations.txt
          fi
          
          echo "${{ steps.changed_files.outputs.all_changed_files }}" | tr ' ' '\n' > changed_files_list.txt
          
          grep -Ff changed_files_list.txt codenarc-violations.txt > filtered-violations.txt || true

      - name: Comment on PR with Violations or Success
        uses: actions/github-script@v7
        env:
          VIOLATIONS_FILE: ${{ github.workspace }}/filtered-violations.txt
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            let violations = [];
            if (fs.existsSync(process.env.VIOLATIONS_FILE)) {
              violations = fs.readFileSync(process.env.VIOLATIONS_FILE, 'utf8').split('\n').filter(Boolean);
            }

            if (violations.length > 0) {
              let comments = [];
              for (const violation of violations) {
                const parts = violation.split(":");
                if (parts.length >= 3) {
                  const [file, line, ...messageParts] = parts;
                  const message = messageParts.join(":").trim();

                  comments.push({
                    path: file,
                    line: parseInt(line, 10),
                    body: `⚠️ **CodeNarc Warning:** ${message}`
                  });
                }
              }

              if (comments.length > 0) {
                github.rest.pulls.createReview({
                  owner,
                  repo,
                  pull_number: prNumber,
                  event: "COMMENT",
                  comments
                });
              }
            } else {
              github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: "✅ **CodeNarc Check Passed!** No issues detected."
              });
            }
